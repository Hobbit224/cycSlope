        
<!-- /////////////// DRAW CHART /////////////// -->
        <!-- //Note: If we have enough time, add animation.  -->
    <!-- // Load the AJAX API -->
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">


    // Load the Visualization API and the core chart package. 
        // NOTE: If we want to go with material lines (which we probably do), load line package instead.
        google.charts.load("current", {packages: ["corechart"]});
    // Set a callback to run when the Google Visualization API is loaded.
        google.charts.setOnLoadCallback(drawChart);
    //// (Temprorary) ELEVATION DATA ////
    // Note: Hardcoded for now to create a working example of elevation chart, but in actual code we will need to pass in elevation data from elevation API.

    <% for (let j = 0; j < routeCount; j++) { %>

    var elevationData = <%= mapDetails.elevationData[j] %>
    console.log(<%=mapDetails%>);

    // Callback that creates and populates a data table, instantiates the chart, passes the data, and draws the chart.
        function drawChart() {
        // Create the data table.
            var data = new google.visualization.DataTable();
            data.addColumn('number', 'Sample');
            data.addColumn('number', 'Elevation');
            for (let i = 0; i < elevationData.results.length; i++) {
                data.addRows([
                    [i, elevationData.results[i].elevation]
                ]);
                console.log("Row added")
            };
        
        // Set chart options
            var options = {'title':'Elevation',
                'width':400,
                'height':150
            };
        // Pass in options and instantiate chart

            var chart = new google.visualization.LineChart(document.getElementById('chart'+ <%=(j + 1)%>+'_div'));
            chart.draw(data, options);

        }
    <% } %>
    // </script>